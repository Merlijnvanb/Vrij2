// <auto-generated>
// This code was auto-generated by a tool, every time
// the tool executes this code will be reset.
//
// If you need to extend the classes generated to add
// fields or methods to them, please create partial
// declarations in another file.
// </auto-generated>
#pragma warning disable 0109
#pragma warning disable 1591


namespace Quantum {
  using Photon.Deterministic;
  using Quantum;
  using Quantum.Core;
  using Quantum.Collections;
  using Quantum.Inspector;
  using Quantum.Physics2D;
  using Quantum.Physics3D;
  using Byte = System.Byte;
  using SByte = System.SByte;
  using Int16 = System.Int16;
  using UInt16 = System.UInt16;
  using Int32 = System.Int32;
  using UInt32 = System.UInt32;
  using Int64 = System.Int64;
  using UInt64 = System.UInt64;
  using Boolean = System.Boolean;
  using String = System.String;
  using Object = System.Object;
  using FlagsAttribute = System.FlagsAttribute;
  using SerializableAttribute = System.SerializableAttribute;
  using MethodImplAttribute = System.Runtime.CompilerServices.MethodImplAttribute;
  using MethodImplOptions = System.Runtime.CompilerServices.MethodImplOptions;
  using FieldOffsetAttribute = System.Runtime.InteropServices.FieldOffsetAttribute;
  using StructLayoutAttribute = System.Runtime.InteropServices.StructLayoutAttribute;
  using LayoutKind = System.Runtime.InteropServices.LayoutKind;
  #if QUANTUM_UNITY //;
  using TooltipAttribute = UnityEngine.TooltipAttribute;
  using HeaderAttribute = UnityEngine.HeaderAttribute;
  using SpaceAttribute = UnityEngine.SpaceAttribute;
  using RangeAttribute = UnityEngine.RangeAttribute;
  using HideInInspectorAttribute = UnityEngine.HideInInspector;
  using PreserveAttribute = UnityEngine.Scripting.PreserveAttribute;
  using FormerlySerializedAsAttribute = UnityEngine.Serialization.FormerlySerializedAsAttribute;
  using MovedFromAttribute = UnityEngine.Scripting.APIUpdating.MovedFromAttribute;
  using CreateAssetMenu = UnityEngine.CreateAssetMenuAttribute;
  using RuntimeInitializeOnLoadMethodAttribute = UnityEngine.RuntimeInitializeOnLoadMethodAttribute;
  #endif //;
  
  public unsafe partial class Frame {
    public unsafe partial struct FrameEvents {
      static partial void GetEventTypeCountCodeGen(ref Int32 eventCount) {
        eventCount = 11;
      }
      static partial void GetParentEventIDCodeGen(Int32 eventID, ref Int32 parentEventID) {
        switch (eventID) {
          default: break;
        }
      }
      static partial void GetEventTypeCodeGen(Int32 eventID, ref System.Type result) {
        switch (eventID) {
          case EventHeartbeat.ID: result = typeof(EventHeartbeat); return;
          case EventTentacleMove.ID: result = typeof(EventTentacleMove); return;
          case EventUpdateHealth.ID: result = typeof(EventUpdateHealth); return;
          case EventEndGame.ID: result = typeof(EventEndGame); return;
          case EventIntensity.ID: result = typeof(EventIntensity); return;
          case EventNewRound.ID: result = typeof(EventNewRound); return;
          case EventFootstep.ID: result = typeof(EventFootstep); return;
          case EventHit.ID: result = typeof(EventHit); return;
          case EventParry.ID: result = typeof(EventParry); return;
          case EventDeath.ID: result = typeof(EventDeath); return;
          default: break;
        }
      }
      public EventHeartbeat Heartbeat(FP BeatRampPercentage) {
        var ev = _f.Context.AcquireEvent<EventHeartbeat>(EventHeartbeat.ID);
        ev.BeatRampPercentage = BeatRampPercentage;
        _f.AddEvent(ev);
        return ev;
      }
      public EventTentacleMove TentacleMove(FPVector2 NewPos) {
        var ev = _f.Context.AcquireEvent<EventTentacleMove>(EventTentacleMove.ID);
        ev.NewPos = NewPos;
        _f.AddEvent(ev);
        return ev;
      }
      public EventUpdateHealth UpdateHealth(Int32 SurvivorID, FP MaxHealth, FP CurrentHealth, StateID CurrentState, QBoolean Break, QBoolean Dead) {
        var ev = _f.Context.AcquireEvent<EventUpdateHealth>(EventUpdateHealth.ID);
        ev.SurvivorID = SurvivorID;
        ev.MaxHealth = MaxHealth;
        ev.CurrentHealth = CurrentHealth;
        ev.CurrentState = CurrentState;
        ev.Break = Break;
        ev.Dead = Dead;
        _f.AddEvent(ev);
        return ev;
      }
      public EventEndGame EndGame(QBoolean Survivor1MadeIt, QBoolean Survivor2MadeIt) {
        var ev = _f.Context.AcquireEvent<EventEndGame>(EventEndGame.ID);
        ev.Survivor1MadeIt = Survivor1MadeIt;
        ev.Survivor2MadeIt = Survivor2MadeIt;
        _f.AddEvent(ev);
        return ev;
      }
      public EventIntensity Intensity(FP Value) {
        var ev = _f.Context.AcquireEvent<EventIntensity>(EventIntensity.ID);
        ev.Value = Value;
        _f.AddEvent(ev);
        return ev;
      }
      public EventNewRound NewRound(Int32 RoundNumber) {
        var ev = _f.Context.AcquireEvent<EventNewRound>(EventNewRound.ID);
        ev.RoundNumber = RoundNumber;
        _f.AddEvent(ev);
        return ev;
      }
      public EventFootstep Footstep(Int32 SurvivorID, FPVector2 Pos) {
        var ev = _f.Context.AcquireEvent<EventFootstep>(EventFootstep.ID);
        ev.SurvivorID = SurvivorID;
        ev.Pos = Pos;
        _f.AddEvent(ev);
        return ev;
      }
      public EventHit Hit(Int32 SurvivorID, FPVector2 Pos) {
        var ev = _f.Context.AcquireEvent<EventHit>(EventHit.ID);
        ev.SurvivorID = SurvivorID;
        ev.Pos = Pos;
        _f.AddEvent(ev);
        return ev;
      }
      public EventParry Parry(Int32 SurvivorID, FPVector2 Pos) {
        var ev = _f.Context.AcquireEvent<EventParry>(EventParry.ID);
        ev.SurvivorID = SurvivorID;
        ev.Pos = Pos;
        _f.AddEvent(ev);
        return ev;
      }
      public EventDeath Death(Int32 SurvivorID, FPVector2 Pos) {
        var ev = _f.Context.AcquireEvent<EventDeath>(EventDeath.ID);
        ev.SurvivorID = SurvivorID;
        ev.Pos = Pos;
        _f.AddEvent(ev);
        return ev;
      }
    }
  }
  public unsafe partial class EventHeartbeat : EventBase {
    public new const Int32 ID = 1;
    public FP BeatRampPercentage;
    protected EventHeartbeat(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventHeartbeat() : 
        base(1, EventFlags.Server|EventFlags.Client) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 41;
        hash = hash * 31 + BeatRampPercentage.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventTentacleMove : EventBase {
    public new const Int32 ID = 2;
    public FPVector2 NewPos;
    protected EventTentacleMove(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventTentacleMove() : 
        base(2, EventFlags.Server|EventFlags.Client) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 43;
        hash = hash * 31 + NewPos.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventUpdateHealth : EventBase {
    public new const Int32 ID = 3;
    public Int32 SurvivorID;
    public FP MaxHealth;
    public FP CurrentHealth;
    public StateID CurrentState;
    public QBoolean Break;
    public QBoolean Dead;
    protected EventUpdateHealth(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventUpdateHealth() : 
        base(3, EventFlags.Server|EventFlags.Client) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 47;
        hash = hash * 31 + SurvivorID.GetHashCode();
        hash = hash * 31 + MaxHealth.GetHashCode();
        hash = hash * 31 + CurrentHealth.GetHashCode();
        hash = hash * 31 + CurrentState.GetHashCode();
        hash = hash * 31 + Break.GetHashCode();
        hash = hash * 31 + Dead.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventEndGame : EventBase {
    public new const Int32 ID = 4;
    public QBoolean Survivor1MadeIt;
    public QBoolean Survivor2MadeIt;
    protected EventEndGame(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventEndGame() : 
        base(4, EventFlags.Server|EventFlags.Client) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 53;
        hash = hash * 31 + Survivor1MadeIt.GetHashCode();
        hash = hash * 31 + Survivor2MadeIt.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventIntensity : EventBase {
    public new const Int32 ID = 5;
    public FP Value;
    protected EventIntensity(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventIntensity() : 
        base(5, EventFlags.Server|EventFlags.Client) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 59;
        hash = hash * 31 + Value.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventNewRound : EventBase {
    public new const Int32 ID = 6;
    public Int32 RoundNumber;
    protected EventNewRound(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventNewRound() : 
        base(6, EventFlags.Server|EventFlags.Client) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 61;
        hash = hash * 31 + RoundNumber.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventFootstep : EventBase {
    public new const Int32 ID = 7;
    public Int32 SurvivorID;
    public FPVector2 Pos;
    protected EventFootstep(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventFootstep() : 
        base(7, EventFlags.Server|EventFlags.Client) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 67;
        hash = hash * 31 + SurvivorID.GetHashCode();
        hash = hash * 31 + Pos.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventHit : EventBase {
    public new const Int32 ID = 8;
    public Int32 SurvivorID;
    public FPVector2 Pos;
    protected EventHit(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventHit() : 
        base(8, EventFlags.Server|EventFlags.Client) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 71;
        hash = hash * 31 + SurvivorID.GetHashCode();
        hash = hash * 31 + Pos.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventParry : EventBase {
    public new const Int32 ID = 9;
    public Int32 SurvivorID;
    public FPVector2 Pos;
    protected EventParry(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventParry() : 
        base(9, EventFlags.Server|EventFlags.Client) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 73;
        hash = hash * 31 + SurvivorID.GetHashCode();
        hash = hash * 31 + Pos.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventDeath : EventBase {
    public new const Int32 ID = 10;
    public Int32 SurvivorID;
    public FPVector2 Pos;
    protected EventDeath(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventDeath() : 
        base(10, EventFlags.Server|EventFlags.Client) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 79;
        hash = hash * 31 + SurvivorID.GetHashCode();
        hash = hash * 31 + Pos.GetHashCode();
        return hash;
      }
    }
  }
}
#pragma warning restore 0109
#pragma warning restore 1591
